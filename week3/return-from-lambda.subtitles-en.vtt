WEBVTT

1
00:00:00.000 --> 00:00:01.950
In this video, you'll learn

2
00:00:01.950 --> 00:00:04.245
what does return expression
inside the lambda do,

3
00:00:04.245 --> 00:00:05.610
why it works like that,

4
00:00:05.610 --> 00:00:08.610
and how to safely use
it for your purposes.

5
00:00:08.610 --> 00:00:10.890
Let's start with an example

6
00:00:10.890 --> 00:00:13.425
that sometimes might
be really confusing.

7
00:00:13.425 --> 00:00:15.525
It's a puzzler, so you can expect

8
00:00:15.525 --> 00:00:17.805
something surprising as a result.

9
00:00:17.805 --> 00:00:20.130
The duplicate
non-zero function is

10
00:00:20.130 --> 00:00:23.580
intended to duplicate
all the elements except zero.

11
00:00:23.580 --> 00:00:27.015
The question is, what does
it produce as a result?

12
00:00:27.015 --> 00:00:28.875
You can try to guess
what's going on

13
00:00:28.875 --> 00:00:31.095
and later we'll
discuss the details.

14
00:00:31.095 --> 00:00:34.185
The options are; a list
of list int results,

15
00:00:34.185 --> 00:00:37.800
the same list but flattened
or in other words,

16
00:00:37.800 --> 00:00:42.510
the list of all the non-zero
elements or an empty list.

17
00:00:42.510 --> 00:00:44.630
The right answer here is

18
00:00:44.630 --> 00:00:47.150
an empty list which
is really unexpected.

19
00:00:47.150 --> 00:00:49.910
You can easily write
similar code and

20
00:00:49.910 --> 00:00:51.560
expect this function to

21
00:00:51.560 --> 00:00:53.840
print duplicated
non-zero elements.

22
00:00:53.840 --> 00:00:56.815
Let's see what's going on here.

23
00:00:56.815 --> 00:01:00.405
Returning Kotlin always returns

24
00:01:00.405 --> 00:01:03.525
from a function marked with fun.

25
00:01:03.525 --> 00:01:06.425
That's somthing you may
consider as a rule.

26
00:01:06.425 --> 00:01:09.695
It explains an empty list
here as a result.

27
00:01:09.695 --> 00:01:12.305
When the function
finds zero element,

28
00:01:12.305 --> 00:01:14.660
it returns an empty list but it

29
00:01:14.660 --> 00:01:17.495
returns an empty list
from the whole function.

30
00:01:17.495 --> 00:01:20.855
That's why an empty list is
printed out as a result.

31
00:01:20.855 --> 00:01:24.810
Let's discuss why
it works this way.

32
00:01:24.820 --> 00:01:30.025
Why in Kotlin return returns
from the outer function?

33
00:01:30.025 --> 00:01:33.485
Consider the following example
when you have a regular

34
00:01:33.485 --> 00:01:37.025
for loop and inside this
for loop you use return.

35
00:01:37.025 --> 00:01:40.615
Return simply returns
from the function.

36
00:01:40.615 --> 00:01:44.235
If you convert the
for loop to foreach,

37
00:01:44.235 --> 00:01:46.970
then you kind of expect that

38
00:01:46.970 --> 00:01:50.840
return continue to
behave in the same way.

39
00:01:50.840 --> 00:01:53.390
Return inside foreach returns

40
00:01:53.390 --> 00:01:55.445
from the whole function as well.

41
00:01:55.445 --> 00:01:58.310
In this scenario,
we are glad that

42
00:01:58.310 --> 00:01:59.750
return returns from

43
00:01:59.750 --> 00:02:02.300
the whole function nudge
from the lambda.

44
00:02:02.300 --> 00:02:06.845
That explains the motivation
of why it works like this.

45
00:02:06.845 --> 00:02:11.060
A lot of functions in Kotlin
like foreach behave like

46
00:02:11.060 --> 00:02:13.715
language constructs
and we want to provide

47
00:02:13.715 --> 00:02:17.570
such almost language
construct experience.

48
00:02:17.570 --> 00:02:22.640
What can you do if you need
to return from a lambda?

49
00:02:22.640 --> 00:02:26.565
You can use the labelled
return syntax.

50
00:02:26.565 --> 00:02:29.330
Here, the labeled return will

51
00:02:29.330 --> 00:02:32.330
return from the
corresponding lambda.

52
00:02:32.330 --> 00:02:34.970
By default, you can
use the name of

53
00:02:34.970 --> 00:02:39.215
the function that calls
this lambda as a label.

54
00:02:39.215 --> 00:02:42.170
But if you want, you can specify

55
00:02:42.170 --> 00:02:44.270
any label name put it right

56
00:02:44.270 --> 00:02:46.835
before the lambda
followed by @ sign.

57
00:02:46.835 --> 00:02:49.010
Here we provided
the custom name

58
00:02:49.010 --> 00:02:51.740
just L to label the lambda.

59
00:02:51.740 --> 00:02:56.190
You then use this name
in a labeled return.

60
00:02:56.390 --> 00:02:58.740
Now that duplicate

61
00:02:58.740 --> 00:03:01.845
non zero function
implementation uses labels,

62
00:03:01.845 --> 00:03:04.650
it returns what we expect

63
00:03:04.650 --> 00:03:09.570
The flattened list of
duplicated non zero numbers.

64
00:03:09.860 --> 00:03:13.465
There is another solution
to the same problem.

65
00:03:13.465 --> 00:03:15.790
Instead of lambda, you can use

66
00:03:15.790 --> 00:03:17.500
a local function and

67
00:03:17.500 --> 00:03:19.885
then pass the reference
to this local function.

68
00:03:19.885 --> 00:03:22.975
In this case, return
behaves as expected.

69
00:03:22.975 --> 00:03:25.000
It returns from
the local function

70
00:03:25.000 --> 00:03:28.190
marked with the fun keyboard.

71
00:03:28.280 --> 00:03:30.805
Now, the alternative solution

72
00:03:30.805 --> 00:03:32.755
is to use an anonymous function.

73
00:03:32.755 --> 00:03:36.700
If you don't want to invent
a name for a local function,

74
00:03:36.700 --> 00:03:39.205
you can use an anonymous
function instead.

75
00:03:39.205 --> 00:03:42.025
You can define an anonymous
function in place,

76
00:03:42.025 --> 00:03:45.205
similar to the lambda when
you pass it as an argument.

77
00:03:45.205 --> 00:03:46.720
In essence, it's simply

78
00:03:46.720 --> 00:03:48.920
an alternative syntax
for lambdas.

79
00:03:48.920 --> 00:03:50.890
The under the hood implementation

80
00:03:50.890 --> 00:03:53.105
the compiled bytecode will be the

81
00:03:53.105 --> 00:03:56.770
same for lambda and
an anonymous function,

82
00:03:56.770 --> 00:03:59.840
the only difference
is syntactic.

83
00:03:59.840 --> 00:04:03.110
You can now use a return
which returns from

84
00:04:03.110 --> 00:04:06.755
the anonymous function
marked with the fun keyword.

85
00:04:06.755 --> 00:04:10.370
What's more, you can specify
the return type for

86
00:04:10.370 --> 00:04:14.700
an anonymous function which
is not possible for a lambda.

87
00:04:14.710 --> 00:04:19.100
Sometimes, it's possible
to simply avoid return.

88
00:04:19.100 --> 00:04:22.460
In this case, we use
the result of if instead of

89
00:04:22.460 --> 00:04:26.670
return and we get what
we expect as a result.

90
00:04:26.860 --> 00:04:29.600
One more question to you.

91
00:04:29.600 --> 00:04:32.779
What do you think,
does labeled return

92
00:04:32.779 --> 00:04:34.610
inside foreach correspond to

93
00:04:34.610 --> 00:04:37.595
break or continue
inside for loop?

94
00:04:37.595 --> 00:04:39.845
The right answer is continue.

95
00:04:39.845 --> 00:04:43.370
Breaks stops the for loop
completely while continue

96
00:04:43.370 --> 00:04:45.440
stops only the current iteration

97
00:04:45.440 --> 00:04:47.155
and goes to the next one.

98
00:04:47.155 --> 00:04:49.325
Like continue, returned from

99
00:04:49.325 --> 00:04:52.115
a lambda only stops
the current iteration,

100
00:04:52.115 --> 00:04:56.250
the current lambda, but
doesn't stop the whole loop.

101
00:04:56.250 --> 00:05:01.605
Note that the regular return
doesn't correspond to break.

102
00:05:01.605 --> 00:05:03.780
They are the same only if

103
00:05:03.780 --> 00:05:05.825
the foreach iteration
of for loop

104
00:05:05.825 --> 00:05:08.395
is the last statement
in the function.

105
00:05:08.395 --> 00:05:10.820
Otherwise, they differ in whether

106
00:05:10.820 --> 00:05:13.970
the statement is following
right afterword are called.

107
00:05:13.970 --> 00:05:16.880
Return returns from
the whole function,

108
00:05:16.880 --> 00:05:21.005
while break completes only
the for loop iteration.

109
00:05:21.005 --> 00:05:25.235
There is no direct analogy
to break other than

110
00:05:25.235 --> 00:05:29.690
extracting the for each call
to a separate function.

111
00:05:29.690 --> 00:05:32.735
This explanation of how
to use return inside

112
00:05:32.735 --> 00:05:34.730
lambda completes our discussion

113
00:05:34.730 --> 00:05:36.350
of functional programming so far.

114
00:05:36.350 --> 00:05:37.730
Later in the course,

115
00:05:37.730 --> 00:05:39.005
we'll return to the topic of

116
00:05:39.005 --> 00:05:41.480
operations on collections
and discuss

117
00:05:41.480 --> 00:05:43.430
inlining and the difference

118
00:05:43.430 --> 00:05:45.740
between eager and lazy iteration.

119
00:05:45.740 --> 00:05:48.095
Our next module we'll focus on

120
00:05:48.095 --> 00:05:50.300
object-oriented
programming in Kotlin

121
00:05:50.300 --> 00:05:53.940
which has some small
differences with Java.
