WEBVTT

1
00:00:00.000 --> 00:00:03.495
In this video, you'll learn
about member references,

2
00:00:03.495 --> 00:00:05.520
and we'll discuss what
is the difference

3
00:00:05.520 --> 00:00:08.190
between bound and
unbound references.

4
00:00:08.190 --> 00:00:11.400
Like Java, Kotlin has
member references,

5
00:00:11.400 --> 00:00:13.770
which can replace
simple Lambdas that only

6
00:00:13.770 --> 00:00:16.500
call a member function or
return a member property,

7
00:00:16.500 --> 00:00:18.570
it can convert Lambda to

8
00:00:18.570 --> 00:00:21.570
member reference automatically
when it's possible.

9
00:00:21.570 --> 00:00:25.140
The syntax for member reference
is the same as in Java.

10
00:00:25.140 --> 00:00:27.075
First goes the class name,

11
00:00:27.075 --> 00:00:31.140
then the double colon, then
the member which we refer.

12
00:00:31.140 --> 00:00:34.095
As we've previously
discussed in Kotlin,

13
00:00:34.095 --> 00:00:36.225
you can store Lambda
in a variable,

14
00:00:36.225 --> 00:00:39.935
however, you can't store
a function in a variable.

15
00:00:39.935 --> 00:00:41.300
It's not like in

16
00:00:41.300 --> 00:00:42.935
a truly functional language

17
00:00:42.935 --> 00:00:44.960
where each function
is a variable.

18
00:00:44.960 --> 00:00:47.120
No, in Kotlin there is

19
00:00:47.120 --> 00:00:50.750
a clear distinction between
functions and variables,

20
00:00:50.750 --> 00:00:54.230
that are connected with how
JVM works under the hood.

21
00:00:54.230 --> 00:00:56.870
If you try to assign
a function to a variable,

22
00:00:56.870 --> 00:00:59.260
you'll get a compiler error.

23
00:00:59.260 --> 00:01:01.275
To fix this issue,

24
00:01:01.275 --> 00:01:03.815
use the function
reference syntax.

25
00:01:03.815 --> 00:01:06.920
Function references allow
you to store a reference to

26
00:01:06.920 --> 00:01:09.350
any defined function in
a variable to be able

27
00:01:09.350 --> 00:01:11.940
to store it and qualitative it.

28
00:01:11.940 --> 00:01:14.270
Keep in mind that this syntax is

29
00:01:14.270 --> 00:01:17.295
just another way to call
a function inside the Lambda,

30
00:01:17.295 --> 00:01:20.050
underlying implementation
are the same.

31
00:01:20.050 --> 00:01:22.570
Here, the full
analogous syntax is

32
00:01:22.570 --> 00:01:26.725
a Lambda that only
calls isEven function.

33
00:01:26.725 --> 00:01:29.740
If a referred member
is a property,

34
00:01:29.740 --> 00:01:33.960
or it's a function that
takes zero or one argument,

35
00:01:33.960 --> 00:01:36.610
then member reference
syntax isn't that

36
00:01:36.610 --> 00:01:39.590
concise in comparison with
the explicit Lambda syntax.

37
00:01:39.590 --> 00:01:41.080
However, if

38
00:01:41.080 --> 00:01:43.450
the referred function
takes several arguments,

39
00:01:43.450 --> 00:01:44.635
you have to repeat

40
00:01:44.635 --> 00:01:47.185
all the parameter names
as Lambda parameters,

41
00:01:47.185 --> 00:01:49.960
and then explicitly
pass them through,

42
00:01:49.960 --> 00:01:52.345
that makes this syntax robust.

43
00:01:52.345 --> 00:01:55.690
Member references allow you
to hide all the parameters,

44
00:01:55.690 --> 00:01:59.660
because the compiler
infers the types for you.

45
00:01:59.660 --> 00:02:03.820
You can pass a function
reference as an argument,

46
00:02:03.820 --> 00:02:05.950
whenever your Lambda
tends to grow too

47
00:02:05.950 --> 00:02:08.230
large and to become
too complicated,

48
00:02:08.230 --> 00:02:09.940
it makes sense to extract

49
00:02:09.940 --> 00:02:11.945
Lambda code into
a separate function,

50
00:02:11.945 --> 00:02:13.750
then you use a reference to

51
00:02:13.750 --> 00:02:16.820
this function instead
of a huge Lambda.

52
00:02:16.830 --> 00:02:20.005
Now, I want to highlight
the difference

53
00:02:20.005 --> 00:02:23.125
between bound and
non-bound references.

54
00:02:23.125 --> 00:02:26.085
In Kotlin, you can create
a boundary reference,

55
00:02:26.085 --> 00:02:28.060
let's us discuss what it is.

56
00:02:28.060 --> 00:02:31.675
In this example, we use
a regular non-bound reference,

57
00:02:31.675 --> 00:02:34.600
which refers to a member
of the person class.

58
00:02:34.600 --> 00:02:38.430
If we check what type
this member reference has,

59
00:02:38.430 --> 00:02:40.750
we see that the first argument

60
00:02:40.750 --> 00:02:43.045
of the function type is person.

61
00:02:43.045 --> 00:02:47.320
Whenever we want to call
this variable or function type,

62
00:02:47.320 --> 00:02:50.900
we need to pass the person
instance explicitly.

63
00:02:50.900 --> 00:02:53.840
If we look under
the hood and check

64
00:02:53.840 --> 00:02:56.540
what Lambda does correspond
to this member reference,

65
00:02:56.540 --> 00:02:59.900
we'll find that this Lambda
takes two arguments,

66
00:02:59.900 --> 00:03:02.075
person and age limit,

67
00:03:02.075 --> 00:03:04.220
it simply calls
the member function is

68
00:03:04.220 --> 00:03:06.920
older inside on
the passed person element.

69
00:03:06.920 --> 00:03:09.785
This reference is
called non bound,

70
00:03:09.785 --> 00:03:12.860
since it's not bound to
any specific instance,

71
00:03:12.860 --> 00:03:17.130
you can call it on any object
of the person class.

72
00:03:17.150 --> 00:03:20.660
Bound reference is
a member reference that

73
00:03:20.660 --> 00:03:23.375
is attached to a specific
instance of the class.

74
00:03:23.375 --> 00:03:25.175
Here, the alice variable

75
00:03:25.175 --> 00:03:27.215
is an instance of
the class person,

76
00:03:27.215 --> 00:03:29.120
and you can bound member efforts

77
00:03:29.120 --> 00:03:31.235
to this specific instance.

78
00:03:31.235 --> 00:03:35.120
If we look at the type of
the bound member reference,

79
00:03:35.120 --> 00:03:37.880
we see that now
there is no person

80
00:03:37.880 --> 00:03:41.660
parameter because the person
instance is already set,

81
00:03:41.660 --> 00:03:44.930
the older function takes
int as a parameter,

82
00:03:44.930 --> 00:03:47.060
and the bound reference also

83
00:03:47.060 --> 00:03:50.335
expect only int as an argument.

84
00:03:50.335 --> 00:03:52.770
If we check which Lambda

85
00:03:52.770 --> 00:03:55.575
corresponds to this member
reference to the hood,

86
00:03:55.575 --> 00:03:58.010
we'll find the Lambda that calls

87
00:03:58.010 --> 00:04:00.995
the member isOlder on
the bound instance.

88
00:04:00.995 --> 00:04:06.075
In this case, this bound
instance is Alice variable.

89
00:04:06.075 --> 00:04:10.740
Member reference can be
bound to this reference.

90
00:04:10.740 --> 00:04:12.170
Here, we'll return a

91
00:04:12.170 --> 00:04:15.100
predicate directly
from the class person.

92
00:04:15.100 --> 00:04:17.790
This predicate is
a member reference

93
00:04:17.790 --> 00:04:19.125
to isOlder function,

94
00:04:19.125 --> 00:04:21.140
that this is the object of

95
00:04:21.140 --> 00:04:23.675
which this member
reference is bound to,

96
00:04:23.675 --> 00:04:27.280
and is usual for
this we can emit it.

97
00:04:27.280 --> 00:04:30.450
Now, we have
this nice short syntax

98
00:04:30.450 --> 00:04:32.400
without left-hand side,

99
00:04:32.400 --> 00:04:35.020
just reference to the member.

100
00:04:35.020 --> 00:04:37.710
To make sure you understand it,

101
00:04:37.710 --> 00:04:39.740
answer the question, what is

102
00:04:39.740 --> 00:04:42.080
the type of this member
reference here?

103
00:04:42.080 --> 00:04:43.385
We have two options,

104
00:04:43.385 --> 00:04:47.425
either taking person or
without person as an argument.

105
00:04:47.425 --> 00:04:50.250
The right answer
is the second one,

106
00:04:50.250 --> 00:04:52.530
it is a bound reference which

107
00:04:52.530 --> 00:04:55.500
stores the person of
this instance inside,

108
00:04:55.500 --> 00:04:57.530
the reference will always be

109
00:04:57.530 --> 00:05:01.350
bound to a specific instance
of the person class.

110
00:05:01.630 --> 00:05:05.075
We can call getAgePredicate

111
00:05:05.075 --> 00:05:06.740
only at the specific instance,

112
00:05:06.740 --> 00:05:10.690
which becomes the bound object
for member reference.

113
00:05:11.120 --> 00:05:13.995
Now the question for you, is

114
00:05:13.995 --> 00:05:17.405
isEven in this example
a bound reference or not?

115
00:05:17.405 --> 00:05:19.940
Yes or no are
the possible answers.

116
00:05:19.940 --> 00:05:21.860
The answer is no,

117
00:05:21.860 --> 00:05:24.350
because here it's
just a reference

118
00:05:24.350 --> 00:05:25.960
to a top-level function.

119
00:05:25.960 --> 00:05:28.080
There is no stored object

120
00:05:28.080 --> 00:05:30.240
in which this function
is bound to.

121
00:05:30.240 --> 00:05:31.790
Whenever you see the banks and

122
00:05:31.790 --> 00:05:33.920
reference without
the left-hand side,

123
00:05:33.920 --> 00:05:35.330
it's either a reference to

124
00:05:35.330 --> 00:05:38.190
a top-level function
or a bound reference.

125
00:05:38.190 --> 00:05:41.355
In IDE you can always navigate and

126
00:05:41.355 --> 00:05:44.930
see which faction that this
function reference refers to,

127
00:05:44.930 --> 00:05:46.475
it's very convenient.

128
00:05:46.475 --> 00:05:48.290
Now you can use both bound

129
00:05:48.290 --> 00:05:50.180
and unbound references
in your code.

130
00:05:50.180 --> 00:05:52.250
Bound reference store the object

131
00:05:52.250 --> 00:05:54.515
on which the member
can delay to called,

132
00:05:54.515 --> 00:05:58.415
while I'm might be called on
any object of a given type.

133
00:05:58.415 --> 00:06:02.065
Next, we are going to demystify
one of the common puzzler

134
00:06:02.065 --> 00:06:03.935
which may occur if you use

135
00:06:03.935 --> 00:06:06.900
return expression
inside a Lambda.
